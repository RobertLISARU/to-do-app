{"version":3,"sources":["todos.js","components/Todo.js","components/TodosList.js","components/NewTodoForm.js","App.js","reportWebVitals.js","index.js"],"names":["TODOS_URL","getAll","axios","get","headers","create","todo","post","update","oldTodo","newTodo","patch","url","Todo","notifyChange","FormControlLabel","control","Checkbox","checked","completed","onChange","event","Todos","target","then","label","title","TodosList","todos","className","map","id","NewTodoForm","useState","newTodoTitle","setNewTodoTitle","type","placeholder","value","onClick","App","data","isLoading","setTodos","fetchTodos","response","useEffect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAEMA,EAAY,6CA6BH,OAAEC,OA3BjB,WACI,OAAOC,IAAMC,IAAIH,EAAW,CACxBI,QAAS,CACL,OAAU,uBAwBGC,OAnBzB,SAAgBC,GACZ,OAAOJ,IAAMK,KAAKP,EAAWM,EAAM,CAC/BF,QAAS,CACL,OAAU,mBACV,eAAgB,uBAeKI,OAVjC,SAAgBC,EAASC,GACrB,OAAOR,IAAMS,MAAMF,EAAQG,IAAKF,EAAS,CACrCN,QAAS,CACL,OAAU,mBACV,eAAgB,wB,OCMbS,EA1BF,SAAC,GAA4B,IAA1BP,EAAyB,EAAzBA,KAAMQ,EAAmB,EAAnBA,aAClB,OACI,6BACI,cAACC,EAAA,EAAD,CACIC,QACI,cAACC,EAAA,EAAD,CACIC,QAASZ,EAAKa,UACdC,SAAU,SAACC,GACPC,EAAMd,OAAOF,EACT,CACI,UAAae,EAAME,OAAOL,UAC3BM,MAAK,kBAAMV,UAI9BW,MAAOnB,EAAKa,UAAY,4BAAIb,EAAKoB,QAAapB,EAAKoB,WCFpDC,EAfG,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,MAAOd,EAAmB,EAAnBA,aAExB,OAAO,qBAAKe,UAAU,mBAAf,SACH,6BACKD,EAAME,KAAI,SAACxB,GAAD,OACP,cAAC,EAAD,CAAoBA,KAAMA,EAAMQ,aAAcA,GAAnCR,EAAKyB,YCuBjBC,EA3BK,SAAC,GAAsB,IAApBlB,EAAmB,EAAnBA,aAAmB,EACEmB,mBAAS,IADX,mBAC/BC,EAD+B,KACjBC,EADiB,KAUtC,OACI,qCACI,uBACIC,KAAK,OACLC,YAAY,wBACZC,MAAOJ,EACPd,SAAU,SAACC,GAAYc,EAAgBd,EAAME,OAAOe,UAExD,wBAAQC,QAfG,WACfjB,EAAMjB,OAAO,CAAEqB,MAAOQ,IAAgBV,MAAK,WACvCW,EAAgB,IAChBrB,QAYA,qBCYG0B,MA5Bf,WAAgB,IAAD,EACaP,mBAAS,CAAEQ,KAAM,GAAIC,WAAW,IAD7C,mBACNd,EADM,KACCe,EADD,KAGPC,EAAa,WACjBtB,EAAMrB,SAASuB,MAAK,SAACqB,GAAD,OAAcF,EAAS,CAAEF,KAAMI,EAASJ,KAAMC,WAAW,QAO/E,OAJAI,qBAAU,WACRF,MACC,IAGD,sBAAKf,UAAU,MAAf,UACE,iCACE,yCAGDD,EAAMc,UAAY,kDACjB,qCACE,cAAC,EAAD,CAAa5B,aAAc8B,IAC3B,cAAC,EAAD,CAAWhB,MAAOA,EAAMa,KAAM3B,aAAc8B,WCdvCG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.34cd5b0d.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst TODOS_URL = \"https://todo-backend-hanami.herokuapp.com/\"\r\n\r\nfunction getAll() {\r\n    return axios.get(TODOS_URL, {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n        }\r\n    })\r\n}\r\n\r\nfunction create(todo) {\r\n    return axios.post(TODOS_URL, todo, {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        }\r\n    })\r\n}\r\n\r\nfunction update(oldTodo, newTodo) {\r\n    return axios.patch(oldTodo.url, newTodo, {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        }\r\n    })\r\n}\r\n\r\n\r\nexport default { getAll, create, update }\r\n","import PropTypes from 'prop-types'\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport Todos from './../todos'\r\n\r\nconst Todo = ({ todo, notifyChange }) => {\r\n    return (\r\n        <li>\r\n            <FormControlLabel\r\n                control={\r\n                    <Checkbox\r\n                        checked={todo.completed}\r\n                        onChange={(event) => {\r\n                            Todos.update(todo,\r\n                                {\r\n                                    \"completed\": event.target.checked\r\n                                }).then(() => notifyChange())\r\n                        }}\r\n                    />\r\n                }\r\n                label={todo.completed ? <s>{todo.title}</s> : todo.title}\r\n            />\r\n        </li>\r\n    )\r\n}\r\n\r\nTodo.propTypes = {\r\n    todo: PropTypes.object,\r\n    notifyChange: PropTypes.func\r\n}\r\n\r\nexport default Todo\r\n","import PropTypes from 'prop-types'\r\nimport Todo from './Todo'\r\n\r\nconst TodosList = ({ todos, notifyChange }) => {\r\n\r\n    return <div className='TodosListWrapper'>\r\n        <ul>\r\n            {todos.map((todo) =>\r\n                <Todo key={todo.id} todo={todo} notifyChange={notifyChange} />)}\r\n        </ul>\r\n    </div>\r\n}\r\n\r\nTodosList.propTypes = {\r\n    todos: PropTypes.array,\r\n    notifyChange: PropTypes.func\r\n}\r\n\r\nexport default TodosList\r\n","import PropTypes from 'prop-types'\r\nimport { useState } from 'react'\r\nimport Todos from './../todos'\r\n\r\nconst NewTodoForm = ({ notifyChange }) => {\r\n    const [newTodoTitle, setNewTodoTitle] = useState('')\r\n\r\n    const createTodo = () => {\r\n        Todos.create({ title: newTodoTitle }).then(() => {\r\n            setNewTodoTitle('')\r\n            notifyChange()\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type='text'\r\n                placeholder='What needs to be done'\r\n                value={newTodoTitle}\r\n                onChange={(event) => { setNewTodoTitle(event.target.value) }}\r\n            />\r\n            <button onClick={createTodo}>Add</button>\r\n        </>\r\n    )\r\n}\r\n\r\nNewTodoForm.propTypes = {\r\n    notifyChange: PropTypes.func\r\n}\r\n\r\nexport default NewTodoForm\r\n","import './App.css'\r\nimport TodosList from './components/TodosList'\r\nimport NewTodoForm from './components/NewTodoForm'\r\nimport { useState, useEffect } from 'react'\r\nimport Todos from './todos'\r\n\r\nfunction App() {\r\n  const [todos, setTodos] = useState({ data: [], isLoading: true })\r\n\r\n  const fetchTodos = () => {\r\n    Todos.getAll().then((response) => setTodos({ data: response.data, isLoading: false }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchTodos()\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h1>Todos</h1>\r\n      </header>\r\n\r\n      {todos.isLoading ? <p>Fetching todos...</p> :\r\n        <>\r\n          <NewTodoForm notifyChange={fetchTodos} />\r\n          <TodosList todos={todos.data} notifyChange={fetchTodos} />\r\n        </>\r\n      }\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}