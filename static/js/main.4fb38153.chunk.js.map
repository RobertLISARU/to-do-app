{"version":3,"sources":["todos.js","components/Todo.js","components/TodosList.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["TODOS_URL","getAll","axios","get","headers","create","todo","post","update","oldTodo","newTodo","patch","url","Todo","notifyChange","Checkbox","inputProps","checked","completed","onChange","event","Todos","target","then","className","data-testid","title","TodosList","todos","map","id","Header","useState","newTodoTitle","setNewTodoTitle","placeholder","value","onClick","App","data","isLoading","setTodos","fetchTodos","a","response","useEffect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQAEMA,EAAY,6CA4BH,OAAEC,OA1BjB,WACI,OAAOC,IAAMC,IAAIH,EAAW,CACxBI,QAAS,CACL,OAAU,uBAuBGC,OAlBzB,SAAgBC,GACZ,OAAOJ,IAAMK,KAAKP,EAAWM,EAAM,CAC/BF,QAAS,CACL,OAAU,mBACV,eAAgB,uBAcKI,OATjC,SAAgBC,EAASC,GACrB,OAAOR,IAAMS,MAAMF,EAAQG,IAAKF,EAAS,CACrCN,QAAS,CACL,OAAU,mBACV,eAAgB,wB,OCKbS,EA1BF,SAAC,GAA4B,IAA1BP,EAAyB,EAAzBA,KAAMQ,EAAmB,EAAnBA,aAClB,OACI,+BACI,cAACC,EAAA,EAAD,CACIC,WAAY,CAAE,cAAe,gBAC7BC,QAASX,EAAKY,UACdC,SAAU,SAACC,GACPC,EAAMb,OAAOF,EACT,CACI,UAAac,EAAME,OAAOL,UAC3BM,MAAK,kBAAMT,UAG1B,qBAAKU,UAAU,YACXC,cAAY,YADhB,SAEKnB,EAAKY,UAAY,4BAAIZ,EAAKoB,QAAapB,EAAKoB,YCD9CC,EAfG,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,MAAOd,EAAmB,EAAnBA,aAExB,OAAO,qBAAKU,UAAU,mBAAf,SACH,6BACKI,EAAMC,KAAI,SAACvB,GAAD,OACP,cAAC,EAAD,CAAoBA,KAAMA,EAAMQ,aAAcA,GAAnCR,EAAKwB,YC+BjBC,EAnCA,SAAC,GAAsB,IAApBjB,EAAmB,EAAnBA,aAAmB,EACOkB,mBAAS,IADhB,mBAC1BC,EAD0B,KACZC,EADY,KAUjC,OACI,yBAAQV,UAAU,SAAlB,UACI,uCACA,uBACIC,cAAY,eACZU,YAAY,wBACZC,MAAOH,EACPd,SAAU,SAACC,GACPc,EAAgBd,EAAME,OAAOc,UAGrC,sBACIZ,UAAU,SACVC,cAAY,YACZY,QArBO,WACfhB,EAAMhB,OAAO,CAAEqB,MAAOO,IAAgBV,MAAK,WACvCW,EAAgB,IAChBpB,QAeA,qBCMGwB,MAzBf,WAAgB,IAAD,EACaN,mBAAS,CAAEO,KAAM,GAAIC,WAAW,IAD7C,mBACNZ,EADM,KACCa,EADD,KAGPC,EAAU,uCAAG,4BAAAC,EAAA,sEACMtB,EAAMpB,SADZ,OACX2C,EADW,OAEjBH,EAAS,CAAEF,KAAMK,EAASL,KAAMC,WAAW,IAF1B,2CAAH,qDAShB,OAJAK,qBAAU,WACRH,MACC,IAGD,qBAAKlB,UAAU,MAAf,SACGI,EAAMY,UAAY,kDACjB,qCACE,cAAC,EAAD,CAAQ1B,aAAc4B,IACtB,cAAC,EAAD,CAAWd,MAAOA,EAAMW,KAAMzB,aAAc4B,UCXvCI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4fb38153.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst TODOS_URL = \"https://todo-backend-hanami.herokuapp.com/\"\r\n\r\nfunction getAll() {\r\n    return axios.get(TODOS_URL, {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n        }\r\n    })\r\n}\r\n\r\nfunction create(todo) {\r\n    return axios.post(TODOS_URL, todo, {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        }\r\n    })\r\n}\r\n\r\nfunction update(oldTodo, newTodo) {\r\n    return axios.patch(oldTodo.url, newTodo, {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        }\r\n    })\r\n}\r\n\r\nexport default { getAll, create, update }\r\n","import PropTypes from 'prop-types'\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport Todos from './../todos'\r\n\r\nconst Todo = ({ todo, notifyChange }) => {\r\n    return (\r\n        <li>\r\n            <Checkbox\r\n                inputProps={{ 'data-testid': 'todoCheckbox' }}\r\n                checked={todo.completed}\r\n                onChange={(event) => {\r\n                    Todos.update(todo,\r\n                        {\r\n                            \"completed\": event.target.checked\r\n                        }).then(() => notifyChange())\r\n                }}\r\n            />\r\n            <div className='todoLabel'\r\n                data-testid=\"todoLabel\">\r\n                {todo.completed ? <s>{todo.title}</s> : todo.title}\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nTodo.propTypes = {\r\n    todo: PropTypes.object,\r\n    notifyChange: PropTypes.func\r\n}\r\n\r\nexport default Todo\r\n","import PropTypes from 'prop-types'\r\nimport Todo from './Todo'\r\n\r\nconst TodosList = ({ todos, notifyChange }) => {\r\n\r\n    return <div className='todosListWrapper'>\r\n        <ul>\r\n            {todos.map((todo) =>\r\n                <Todo key={todo.id} todo={todo} notifyChange={notifyChange} />)}\r\n        </ul>\r\n    </div>\r\n}\r\n\r\nTodosList.propTypes = {\r\n    todos: PropTypes.array,\r\n    notifyChange: PropTypes.func\r\n}\r\n\r\nexport default TodosList\r\n","import PropTypes from 'prop-types'\r\nimport { useState } from 'react'\r\nimport Todos from '../todos'\r\n\r\nconst Header = ({ notifyChange }) => {\r\n    const [newTodoTitle, setNewTodoTitle] = useState('')\r\n\r\n    const createTodo = () => {\r\n        Todos.create({ title: newTodoTitle }).then(() => {\r\n            setNewTodoTitle('')\r\n            notifyChange()\r\n        })\r\n    }\r\n\r\n    return (\r\n        <header className='header'>\r\n            <h1>Todos</h1>\r\n            <input\r\n                data-testid='newTodoInput'\r\n                placeholder='What needs to be done'\r\n                value={newTodoTitle}\r\n                onChange={(event) => {\r\n                    setNewTodoTitle(event.target.value)\r\n                }}\r\n            />\r\n            <span\r\n                className='addBtn'\r\n                data-testid='addButton'\r\n                onClick={createTodo}>\r\n                Add\r\n            </span>\r\n        </header>\r\n    )\r\n}\r\n\r\nHeader.propTypes = {\r\n    notifyChange: PropTypes.func\r\n}\r\n\r\nexport default Header\r\n","import './App.css'\r\nimport TodosList from './components/TodosList'\r\nimport Header from './components/Header'\r\nimport { useState, useEffect } from 'react'\r\nimport Todos from './todos'\r\n\r\nfunction App() {\r\n  const [todos, setTodos] = useState({ data: [], isLoading: true })\r\n\r\n  const fetchTodos = async () => {\r\n    const response = await Todos.getAll()\r\n    setTodos({ data: response.data, isLoading: false })\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchTodos()\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {todos.isLoading ? <p>Fetching todos...</p> :\r\n        <>\r\n          <Header notifyChange={fetchTodos} />\r\n          <TodosList todos={todos.data} notifyChange={fetchTodos} />\r\n        </>\r\n      }\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}